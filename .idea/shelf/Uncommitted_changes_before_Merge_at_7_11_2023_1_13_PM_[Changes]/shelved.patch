Index: back-end/src/routes/routes.controlles.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import express from 'express';\r\nimport pkg from 'sequelize';\r\nconst { Sequelize, DataTypes, Model } = pkg;\r\nimport bodyParser from 'body-parser';\r\nimport bcrypt from 'bcrypt';\r\n// import game from \"../models/game.js\";\r\n\r\nconst app = express();\r\n\r\n\r\nconst route = express.Router();\r\n\r\n// Sequelize configuration\r\nconst sequelize = new Sequelize('snakes-and-ladders', 'root', 'Ahmedkhali12345@#$%', {\r\n    host: 'localhost',\r\n    dialect: 'mysql',\r\n});\r\n\r\n// Define models\r\nclass User extends Model { }\r\nUser.init(\r\n    {\r\n        name: DataTypes.STRING,\r\n        password: DataTypes.STRING,\r\n        createdAt: DataTypes.DATE,\r\n        updatedAt: DataTypes.DATE,\r\n    },\r\n    { sequelize, modelName: 'users' }\r\n);\r\n\r\nclass Game extends Model { }\r\nGame.init(\r\n    {\r\n        boardID: DataTypes.INTEGER,\r\n        noOfPlayers: DataTypes.INTEGER,\r\n        status: DataTypes.STRING,\r\n        capacity: DataTypes.INTEGER,\r\n        currentUser: DataTypes.STRING,\r\n        lastMove: DataTypes.STRING,\r\n        createdAt: DataTypes.DATE,\r\n        updatedAt: DataTypes.DATE,\r\n    },\r\n    { sequelize, modelName: 'game' }\r\n);\r\n\r\nclass GameUsers extends Model { }\r\nGameUsers.init(\r\n    {\r\n        userid: DataTypes.INTEGER,\r\n        gameid: DataTypes.INTEGER,\r\n        position: DataTypes.INTEGER,\r\n        createdAt: DataTypes.DATE,\r\n        updatedAt: DataTypes.DATE,\r\n    },\r\n    { sequelize, modelName: 'gameUsers' }\r\n);\r\n\r\nclass Element extends Model { } // Renamed the model to 'Element'\r\nElement.init(\r\n    {\r\n        boardID: DataTypes.INTEGER,\r\n        from: DataTypes.INTEGER,\r\n        to: DataTypes.INTEGER,\r\n        createdAt: DataTypes.DATE,\r\n        updatedAt: DataTypes.DATE,\r\n    },\r\n    { sequelize, modelName: 'elements' } // Updated modelName to 'elements'\r\n);\r\n\r\n\r\nclass board extends Model { } // Renamed the model to 'Element'\r\nboard.init(\r\n    {\r\n        name: DataTypes.STRING(50),\r\n        Image: DataTypes.STRING(255),\r\n        createdAt: DataTypes.DATE,\r\n        updatedAt: DataTypes.DATE,\r\n    },\r\n    { sequelize, modelName: 'board' } // Updated modelName to 'board'\r\n);\r\n\r\nGame.belongsTo(board, { foreignKey: 'boardID' });\r\nboard.hasMany(Game, { foreignKey: 'boardID' });\r\nElement.belongsTo(board,{ foreignKey: 'boardID' });\r\nboard.hasMany(Element,{ foreignKey: 'boardID' });\r\nGameUsers.belongsTo(Game,{ foreignKey: 'gameid' });\r\nGame.hasMany(GameUsers,{ foreignKey: 'gameid' });\r\nroute.use(bodyParser.json());\r\n\r\n// check if user is founded in database\r\n\r\n\r\nroute.post('/login', async (req, res) => {\r\n    const { name } = req.query;\r\n    try {\r\n        const user = await User.findOne({\r\n            where: { name },\r\n            attributes: ['name'],\r\n        });\r\n        const isNameExists = !!user;\r\n        res.json(isNameExists);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\n// return all games wi the\r\n\r\nroute.get('/game', async (req, res) => {\r\n    try {\r\n        const games = await Game.findAll();\r\n        res.json(games);\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\nroute.get('/game/capacity/:id', async (req, res) => {\r\n    const gameid = req.params.id;\r\n    try {\r\n        const game = await Game.findByPk(gameid, {\r\n            attributes: ['capacity'], // Specify the 'id' and 'capacity' fields to retrieve\r\n        });\r\n        if (!game) {\r\n            res.status(404).json({ error: 'Game not found' });\r\n        } else {\r\n            res.json(game);\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n// adding user to database\r\nroute.post('/register', async (req, res) => {\r\n    const { name, password } = req.body;\r\n    try {\r\n        const existingUser = await User.findOne({ where: { name } });\r\n        if (existingUser) {\r\n            res.json(\"user already exist \");\r\n        } else {\r\n            const hashedPassword = await bcrypt.hash(password, 10); // Hash the password using bcrypt\r\n            const user = await User.create({ name, password: hashedPassword, createdAt: new Date(), updatedAt: new Date() });\r\n            res.json({ id: user.id });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\nroute.post('/gameuser', async (req, res) => {\r\n    const { userid, gameid, position } = req.body;\r\n    try {\r\n        const gameUser = await GameUser.create({\r\n            userid,\r\n            gameid,\r\n            position,\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n        });\r\n        res.send('User added to game');\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\nroute.get('/users/:id', async (req, res) => {\r\n    const userId = req.params.id;\r\n    try {\r\n        const user = await User.findByPk(userId);\r\n        if (!user) {\r\n            res.status(404).json({ error: 'User not found' });\r\n        } else {\r\n            res.json(user);\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\nroute.get('/games/:id', async (req, res) => {\r\n    const gameId = req.params.id;\r\n    try {\r\n        const game = await Game.findByPk(gameId);\r\n        if (!game) {\r\n            res.status(404).json({ error: 'Game not found' });\r\n        } else {\r\n            res.json(game);\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\n\r\nroute.put(\"/updateStatus/:id\", async (req, res) => {\r\n    const userID = req.params.id;\r\n    const newStatus = req.body.status; // Assuming the new position value is provided in the request body\r\n\r\n    try {\r\n        const user = await Game.findByPk(userID);\r\n\r\n        if (!user) {\r\n            res.status(404).json({ error: 'User not found' });\r\n        } else {\r\n            await user.update({ status: newStatus });\r\n            res.json({ message: 'Position updated successfully' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\n\r\n\r\nroute.get('/gameUser/:id', async (req, res) => {\r\n    const gameId = req.params.id;\r\n    try {\r\n        const gameUser = await GameUser.findByPk(gameId);\r\n        if (!gameUser) {\r\n            res.status(404).json({ error: 'Game not found' });\r\n        } else {\r\n            res.json(gameUser);\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\nroute.put(\"/updatePositions/:id\", async (req, res) => {\r\n    const userID = req.params.id;\r\n    const newPosition = req.body.position; // Assuming the new position value is provided in the request body\r\n\r\n    try {\r\n        const user = await GameUser.findByPk(userID);\r\n\r\n        if (!user) {\r\n            res.status(404).json({ error: 'User not found' });\r\n        } else {\r\n            await user.update({ position: newPosition });\r\n            res.json({ message: 'Position updated successfully' });\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\nroute.get('/findAllGameUsers/:id', async (req, res) => {\r\n    const gameId = req.params.id;\r\n    try {\r\n        const gameUser = await GameUser.findAll();\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\nroute.post('/game/joinGame', async (req, res) => {\r\n    const { boardID, noOfPlayers, status, capacity, currentUser, lastMove } = req.body;\r\n    try {\r\n        const game = await Game.create({\r\n            boardID,\r\n            noOfPlayers,\r\n            status,\r\n            capacity,\r\n            currentUser,\r\n            lastMove,\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n        });\r\n        res.send('Game added');\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\nroute.post('/addElement', async (req, res) => {\r\n    const { gameID, from, to } = req.body;\r\n    try {\r\n        const element = await Element.create({\r\n            gameid: gameID, // Renamed to 'gameid'\r\n            from,\r\n            to,\r\n            createdAt: new Date(),\r\n            updatedAt: new Date(),\r\n        });\r\n        res.send('Element added');\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\n\r\nroute.get('/element', async (req, res) => {\r\n    try {\r\n        const elements = await Element.findAll(); // Updated to use the correct model name 'Element'\r\n        res.json(elements); // Updated variable name from 'element' to 'elements'\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n\r\nroute.delete('/gameuser/:id', async (req, res) => {\r\n    const gameUserId = req.params.id;\r\n    try {\r\n        const deletedGameUser = await GameUser.destroy({\r\n            where: { id: gameUserId },\r\n        });\r\n        if (deletedGameUser === 0) {\r\n            res.status(404).json({ error: 'Game user not found' });\r\n        } else {\r\n            res.send('Game user deleted');\r\n        }\r\n    } catch (err) {\r\n        console.error(err);\r\n        res.status(500).json({ error: 'Internal Server Error' });\r\n    }\r\n});\r\n// Sync Sequelize models and start the server\r\nsequelize.sync()\r\n\r\n\r\n\r\nexport default route;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/back-end/src/routes/routes.controlles.js b/back-end/src/routes/routes.controlles.js
--- a/back-end/src/routes/routes.controlles.js	(revision 34297694cdf09c28c5313f8ab31f87fffd4bc43d)
+++ b/back-end/src/routes/routes.controlles.js	(date 1689074034683)
@@ -97,6 +97,7 @@
             where: { name },
             attributes: ['name'],
         });
+        console.log(user.password)
         const isNameExists = !!user;
         res.json(isNameExists);
     } catch (err) {
